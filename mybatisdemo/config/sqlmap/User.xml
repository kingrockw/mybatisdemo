<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间特殊作用： 如果使用mapper动态代理方法，这里就需要配置mapper接口地址-->
<!--一对一查询-->
<mapper namespace="test">

	<!--如果查询的对象实体中包含另一个对象（非基本类型比如：RichUser）-->
	<!--有两种方式处理  	1，自定义类型转化处理器。(此方式使用于，包含的Obejct对应表中的一列)-->
	               	<!--2，利用关键字association，该方式可以指定一个resultMap，也可以在标签内指定一系列的result关联关系-->
					<!--3，利用 . 查找-->
	<resultMap id="richUserresultMap" type="cn.rock.mybatis.po.RichUser">
		<id column="id" property="id"></id>
		<result column="username" property="username"></result>
		<result column="sex" property="sex"></result>
		<result column="birthday" property="birthday"></result>
		<result column="address" property="address"></result>
	</resultMap>

	<resultMap id="userContiansObjResultMap" type="cn.rock.mybatis.po.UserContiansObj">
		<id column="id" property="id"></id>
		<result column="username" property="username"></result>
		<association property="baseInfo" javaType="cn.rock.mybatis.po.BaseInfo">
			<result column="sex" property="sex"></result>
			<result column="birthday" property="birthday"></result>
		</association>

	</resultMap>

	<resultMap id="userContiansObjResultMap1" type="cn.rock.mybatis.po.UserContiansObj">
		<id column="id" property="id"></id>
		<result column="username" property="username"></result>
		<result column="sex" property="baseInfo.sex"></result>
		<result column="birthday" property="baseInfo.birthday"></result>
	</resultMap>
	<!-- 根据用户id查询一条记录（返回单条记录） -->
	<!-- 
	select标签表示sql查询，内容会封装到Mapped Statement中。
	可以将这个select标签称为一个Statement
	id：Statement的id，用于标识select中定义的 sql，id是在同一个命名空间中不允许重复
	#{}：表示一个占位符，避免sql注入
	parameterType：表示输入参数的类型
	resultType：表示输出 结果集单条记录映射的java对象类型，select查询的字段名和resultType中属性名一致，才能映射成功。
	#{value}：value表示parameter输入参数的变量，如果输入参数是简单类型，使用#{}占位符，变量名可以使用value或其它的名称 
	
	 -->
	<select id="findUserById" parameterType="int" resultType="cn.rock.mybatis.po.User">
		
		SELECT * FROM USER WHERE id = #{id}
	
	</select>
	
	
	<!-- 查询用户列表（返回list集合） -->
	<!-- 
	不管结果集查询一条还是多条，resultType指定结果集单条记录映射的java对象类型
	${}：表示sql拼接，相当于sql字符串拼接，无法避免sql注入
	${value}：value表示parameter输入参数的变量，如果输入参数是简单类型，使用${}拼接符，变量名必须使用value
	${value}直接 将value获取到拼接在sql中，value值不加任何修饰
	 -->
	<select id="findUserList" parameterType="java.lang.String" resultType="cn.rock.mybatis.po.User" >
	  SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>
	
	
	<!-- 添加用户
	parameterType：如果parameterType指定 是pojo，在#{}中指定 pojo的属性名获取该pojo的属性值 
	 -->
	<!--2,获取自增长主键方式-->
	<!--useGeneratedKeys="true" keyProperty="id"-->

	<insert id="insertUser"  useGeneratedKeys="true" keyProperty="id" parameterType="cn.rock.mybatis.po.User">
	
	<!--
	keyProperty：将主键设置到pojo中哪个属性中
	order：selectKey中sql执行的时机
	resultType:selectKey中sql执行的结果类型
	LAST_INSERT_ID:是insert后获取自增主键值 
	 -->
-- 1,获取自增长主键方式
	<!--<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">-->
	     <!--select LAST_INSERT_ID()-->
	<!--</selectKey>-->
	insert into user(username,birthday,sex,address,detail,score)
	 values(#{username},#{birthday},#{sex},#{address},#{detail},#{score})
	</insert>
	
	<!-- 根据主键删除用户 -->
	
	<delete id="deleteUser" parameterType="int">
	   delete from user where id=#{id}
	</delete>
	
	<!-- 根据主键用户更新
	更新传入输入参数见容：id和更新的信息
	 -->
	<update id="updateUser" parameterType="cn.rock.mybatis.po.User">
	   update user set username=#{username},birthday=#{birthday},sex=#{sex}  where id=#{id}
	</update>

	<select id="getRichUserById" parameterType="int" resultMap="richUserresultMap">
		SELECT * FROM USER WHERE id = #{id}
	</select>

	<select id="getUserContiansObjById" parameterType="int" resultMap="userContiansObjResultMap">
		SELECT * FROM USER WHERE id = #{id}
	</select>

	<select id="getUserContiansObjById1" parameterType="int" resultMap="userContiansObjResultMap1">
		SELECT * FROM USER WHERE id = #{id}
	</select>

	<!--sql 注入示例-->
	<select id="getUserWithInjection" parameterType="string" resultType="cn.rock.mybatis.po.User">
		SELECT * FROM USER WHERE id = ${value}
	</select>
</mapper>